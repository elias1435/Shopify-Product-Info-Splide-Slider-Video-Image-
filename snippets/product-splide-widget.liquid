{%- comment -%}
Product Splide widget with video+image support, crisp images, and play overlay.
Requires your existing product_splide block settings.
{%- endcomment -%}

{%- assign slide_indices = (1..6) -%}
<section class="product-splide section">
  {%- if block.settings.subtitle or block.settings.heading -%}
    <div class="pslide-headings" style="text-align: {{ block.settings.heading_align }}">
      {%- if block.settings.subtitle != blank -%}
        <div class="pslide-subtitle"
             style="font-size: {{ block.settings.subtitle_font_size }}px; color: {{ block.settings.subtitle_color }}">
          {{ block.settings.subtitle }}
        </div>
      {%- endif -%}
      {%- if block.settings.heading != blank -%}
        <h3 class="pslide-heading"
            style="font-size: {{ block.settings.heading_font_size }}px; color: {{ block.settings.heading_color }}">
          {{ block.settings.heading }}
        </h3>
      {%- endif -%}
    </div>
  {%- endif -%}

  <div id="psplide-{{ block.id }}" class="splide">
    <div class="splide__track">
      <ul class="splide__list">
        {%- for i in slide_indices -%}
{%- assign vfile_key = 'video_file_' | append: i -%}
{%- assign vurl_key  = 'video_url_'  | append: i -%}
{%- assign img_key   = 'image_'      | append: i -%}

{%- assign vfile = block.settings[vfile_key] -%}
{%- assign vurl  = block.settings[vurl_key]  -%}
{%- assign img   = block.settings[img_key]   -%}

          {%- if vfile or vurl or img -%}
            <li class="splide__slide pslide" data-slide-index="{{ i }}">

              {%- comment -%} FALLBACK/POSTER IMAGE (always render if exists) {%- endcomment -%}
              {%- if img -%}
                {%- assign widths = "360,540,720,900,1080,1320,1500" | split: "," -%}
                <img
                  class="pslide__img"
                  alt="{{ product.title | escape }}"
                  src="{{ img | image_url: width: 900 }}"
                  srcset="{% for w in widths %}{{ img | image_url: width: w | escape }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                  sizes="(min-width: 990px) calc((min(100vw, {{ settings.page_width }}px) - 40px - ({{ block.settings.per_page | default: 3 }} - 1) * {{ block.settings.gap | default: 16 }}px)/{{ block.settings.per_page | default: 3 }}), (max-width: 989px) calc(100vw - 32px), 100vw"
                  loading="lazy">
              {%- endif -%}

              {%- comment -%} YOUTUBE/VIMEO (hidden until play) {%- endcomment -%}
              {%- if vurl and vurl != blank -%}
                <div class="pslide__embed" data-video-url="{{ vurl | escape }}" hidden></div>
              {%- endif -%}

              {%- comment -%} SHOPIFY VIDEO FILE (hidden until play) {%- endcomment -%}
              {%- if vfile -%}
                <div class="pslide__video-wrap" hidden>
                  {{ vfile | video_tag:
                    image_size: "1500x",
                    autoplay: false,
                    loop: block.settings.video_loop,
                    muted: block.settings.video_muted,
                    controls: block.settings.video_controls,
                    playsinline: true,
                    class: "pslide__video"
                  }}
                </div>
              {%- endif -%}

              {%- if vfile or vurl -%}
                <button type="button" class="pslide__play" aria-label="Play">
                  <svg width="30" height="30" viewBox="0 0 30 30" aria-hidden="true">
                    <circle cx="15" cy="15" r="15" fill="white" fill-opacity="0.9"/>
                    <path d="M12 9 L22 15 L12 21 Z" fill="#000"/>
                  </svg>
                </button>
              {%- endif -%}

            </li>
          {%- endif -%}
        {%- endfor -%}
      </ul>
    </div>
  </div>
</section>

{%- comment -%} Splide assets (safe if already loaded) {%- endcomment -%}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@latest/dist/css/splide.min.css">
<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@latest/dist/js/splide.min.js" defer></script>

<style>
  /* headings */
  .pslide-headings { margin-bottom: 12px; }
  .pslide-subtitle { opacity: .9; margin-bottom: 6px; }

  /* slide media (your exact rules + crispness) */
  .pslide__img,
  .pslide__video,
  .pslide__embed iframe {
    width: 100%;
    border-radius: 8px;
    max-height: 275px;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* play overlay */
  .pslide { position: relative; }
  .pslide__play {
    position: absolute;
    inset: 0;
    margin: auto;
    width: 48px; height: 48px; /* bigger tap target, icon remains 30x30 inside */
    display: grid; place-items: center;
    border: 0; background: transparent; padding: 0; cursor: pointer;
  }
  .pslide__play svg { width: 30px; height: 30px; }
  .pslide__play:focus-visible { outline: 2px solid #fff; outline-offset: 2px; }

  /* keep dropdowns, buttons from shifting layout when video appears */
  .pslide__embed, .pslide__video-wrap { border-radius: 8px; overflow: hidden; }

  /* Splide tweaks (optional) */
  .product-splide .splide__slide { padding: 0; }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Mount Splide
    var el = document.getElementById('psplide-{{ block.id }}');
    if (el && window.Splide) {
      new Splide(el, {
        type: 'loop',
        perPage: {{ block.settings.per_page | default: 3 }},
        gap: '{{ block.settings.gap | default: 16 }}px',
        autoplay: {{ block.settings.autoplay | default: true }},
        interval: {{ block.settings.interval | default: 4000 }},
        pauseOnHover: true,
        arrows: true,
        pagination: true,
        breakpoints: { 768: { perPage: {{ block.settings.per_page_mobile | default: 1 }} } }
      }).mount();
    }

    // Helper: build provider embed URL
    function toEmbed(url) {
      try {
        var u = new URL(url);
        // YouTube
        if (u.hostname.includes('youtube.com') || u.hostname.includes('youtu.be')) {
          var id = u.searchParams.get('v');
          if (!id && u.hostname.includes('youtu.be')) id = u.pathname.replace('/', '');
          return 'https://www.youtube.com/embed/' + id + '?autoplay=1&muted={{ block.settings.video_muted | default: true }}&loop={{ block.settings.video_loop | default: true }}&playlist=' + id;
        }
        // Vimeo
        if (u.hostname.includes('vimeo.com')) {
          var vid = u.pathname.split('/').pop();
          return 'https://player.vimeo.com/video/' + vid + '?autoplay=1&muted={{ block.settings.video_muted | default: true }}&loop={{ block.settings.video_loop | default: true }}';
        }
      } catch(e) {}
      return null;
    }

    // Click-to-play logic
    document.querySelectorAll('#psplide-{{ block.id }} .pslide').forEach(function (slide) {
      var playBtn = slide.querySelector('.pslide__play');
      if (!playBtn) return;

      playBtn.addEventListener('click', function () {
        // Prefer URL embed
        var embedHost = slide.querySelector('.pslide__embed');
        if (embedHost && embedHost.dataset.videoUrl) {
          var em = toEmbed(embedHost.dataset.videoUrl);
          if (em) {
            embedHost.innerHTML =
              '<iframe src="' + em + '" ' +
              'allow="autoplay; encrypted-media; picture-in-picture" allowfullscreen ' +
              'frameborder="0" loading="lazy"></iframe>';
            embedHost.hidden = false;
            var poster = slide.querySelector('.pslide__img'); if (poster) poster.style.display = 'none';
            playBtn.remove();
            return;
          }
        }

        // Shopify video file
        var wrap = slide.querySelector('.pslide__video-wrap');
        var video = wrap ? wrap.querySelector('video') : null;
        if (wrap && video) {
          wrap.hidden = false;
          var poster = slide.querySelector('.pslide__img'); if (poster) poster.style.display = 'none';
          // Ensure controls visibility per setting (theme editor toggles)
          {% if block.settings.video_controls %}
            video.setAttribute('controls', 'controls');
          {% else %}
            video.removeAttribute('controls');
          {% endif %}
          video.muted = {{ block.settings.video_muted | default: true }};
          video.loop  = {{ block.settings.video_loop  | default: true }};
          video.play().catch(function(){});
          playBtn.remove();
        }
      });
    });
  });
</script>
